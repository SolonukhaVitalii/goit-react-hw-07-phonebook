{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","transitions/title.module.css","transitions/pop.module.css","redux/contacts/contacts-actions.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/contacts-reducer.jsx","redux/store.jsx","index.js"],"names":["module","exports","Actions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","resetFilter","ContactForm","state","notifyWarn","text","toast","warn","notifySuccess","success","handleChange","e","currentTarget","value","setState","replace","handleSubmit","preventDefault","newContact","isAlreadyInContacts","props","reset","toLowerCase","items","find","contact","this","onSubmit","className","s","form","label","input","type","onChange","nameInputId","numberInputId","button","Component","connect","contacts","dispatch","actions","Filter","filter","htmlFor","ContactItem","onDelete","item","info","delete","onClick","contactId","normalizedFilter","filteredItems","includes","list","map","CSSTransition","in","timeout","classNames","titleTransition","appear","length","popTransition","unmountOnExit","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","Store","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.062d68aa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1wSUU\",\"label\":\"ContactForm_label__1aJ-1\",\"input\":\"ContactForm_input__1iKyY\",\"button\":\"ContactForm_button__2uYPm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1EDOP\",\"label\":\"Filter_label__2MMiL\",\"input\":\"Filter_input__HiWZN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__1fq1d\",\"info\":\"ContactItem_info__3TP2N\",\"delete\":\"ContactItem_delete__3ZrkV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3TP46\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"title_appear__2bakC\",\"appearActive\":\"title_appearActive__eQ_2r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1CZQN\",\"enterActive\":\"pop_enterActive__24Kin\",\"exit\":\"pop_exit__2nkuW\",\"exitActive\":\"pop_exitActive__2jxHg\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n        }\r\n}));\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst resetFilter = createAction('contacts/resetFilter');\r\n\r\nconst Actions = { addContact, deleteContact, changeFilter, resetFilter };\r\nexport default Actions;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport shortid from 'shortid';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  notifyWarn = text => toast.warn(text);\r\n  notifySuccess = text => toast.success(text);\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'number'\r\n    ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\r\n    : this.setState({ [name]: value });\r\n  };\r\n    \r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newContact = { id: shortid.generate(), ...this.state };\r\n    if (!this.isAlreadyInContacts(newContact)) {\r\n      const { addContact } = this.props;\r\n      addContact(newContact);\r\n      this.notifySuccess('Added successfully');\r\n      this.reset();\r\n    }\r\n  };\r\n    \r\n  reset = () => {\r\n    this.setState({ name: '', number: '' })\r\n  };\r\n  \r\n  isAlreadyInContacts = newContact => {\r\n    const name = newContact.name.toLowerCase();\r\n    const { number } = newContact;\r\n    const { items } = this.props;\r\n\r\n    if (name === '' || number === '') {\r\n      this.notifyWarn(`Please enter name and number`);\r\n      return true;\r\n    }\r\n\r\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\r\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\r\n      return true;\r\n    }\r\n  };\r\n    \r\n  render() {\r\n    const { name, number } = this.state;\r\n      return (\r\n        <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n            Name\r\n             <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n            /> \r\n        </label>\r\n        <label className={s.label}>\r\n            Number\r\n             <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              id={this.numberInputId}\r\n            /> \r\n        </label>\r\n        <button type=\"submit\" className={s.button}>Add contact</button>\r\n        </form>\r\n      );\r\n  }\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  resetFilter: () => dispatch(actions.resetFilter()),\r\n  addContact: newContact => dispatch(actions.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\n\r\nclass Filter extends Component {\r\n    componentWillUnmount() {\r\n        this.props.resetFilter();\r\n    }\r\n    render() {\r\n        const { filter, onChange } = this.props;\r\n        return (\r\n            <div className={s.filter}>\r\n                <label className={s.label} htmlFor=\"\">Find contacts by name\r\n                <input className={s.input}\r\n                        type=\"text\"\r\n                        name=\"filter\"\r\n                        value={filter}\r\n                        onChange={onChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nFilter.propTypes = {\r\n    filter: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    resetFiletr: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(actions.changeFilter(e.currentTarget.value)),\r\n    resetFilter: () => dispatch(actions.resetFilter()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport s from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ name, number, onDelete }) => (\r\n  \r\n  <li className={s.item}>\r\n    <span className={s.info}>\r\n      {name}: {number}\r\n    </span>\r\n    <button className={s.delete} onClick={onDelete} type=\"button\">\r\n      X\r\n    </button>\r\n    </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/contacts/contacts-actions';\r\nimport s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\n//import { CSSTransition } from 'react-transition-group';\r\n//import slideTransition from '../../transitions/slide.module.css';\r\n\r\nconst ContactList = ({ items, filter, deleteContact }) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    const filteredItems = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n    return (\r\n      <ul className={s.list}>\r\n      {filteredItems &&\r\n          filteredItems.map(({ id, name, number }) => (\r\n          \r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => deleteContact(id)}\r\n          />\r\n          ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  items: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId => dispatch(actions.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\n//import Alert from './components/Alert';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport './App.css';\nimport titleTransition from './transitions/title.module.css';\nimport popTransition from './transitions/pop.module.css';\n//import alertTransition from './transitions/alert.module.css';\n\nconst App = ({ items }) => {\n  return (\n    <div className=\"app\">\n      <CSSTransition\n        in timeout={500}\n        classNames={titleTransition}\n        appear>\n      <h1 className=\"title\">Phonebook</h1>\n      </CSSTransition>\n      <ContactForm />\n      {items.length > 1 &&\n      <CSSTransition\n        in timeout={250}\n        classNames={popTransition}\n        unmountOnExit>\n      <Filter />\n      </CSSTransition>}\n      {items.length > 0 ? (\n        <ContactList />\n      ) : (\n        <p>The contact list is empty. Please add a new contact.</p>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  items: state.contacts.items,\n});\n\nApp.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload,\r\n    [actions.resetFilter]: () => '',\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst store = configureStore({\r\n    reducer: { contacts: persistReducer(contactsPersistConfig, contactsReducer)},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nconst Store = { store, persistor };\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/lib/integration/react';\n\n\n\nReactDOM.render(\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <App />\n            </PersistGate>\n        </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}